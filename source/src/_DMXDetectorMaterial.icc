// -*- C++ -*-
//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
//
// GEANT4 tag $Name:
//
// Author: Alex Howard (alexander.howard@cern.ch)
//
// History:
// -----------
//
// 23rd November 2002 Modified GXe and LXe material tables to include new
//                    scintillation method - Alex Howard
//

// making vacuum
G4Material* vacuum = new G4Material("vacuum", 1., 1.*g/mole, 1.e-20*g/cm3, kStateGas, 0.1*kelvin, 1.e-20*bar);

// making element
G4Element* H  = new G4Element("Hydrogen", "H",  1.,  1.00794   *g/mole);
G4Element* He = new G4Element("Helium",   "He", 2.,  4.002602  *g/mole);
G4Element* B  = new G4Element("Bolone",   "B",  5.,  10.81     *g/mole);
G4Element* C  = new G4Element("Carbon",   "C",  6.,  12.011    *g/mole);
G4Element* N  = new G4Element("Nitrogen", "N",  7.,  14.00674  *g/mole);
G4Element* O  = new G4Element("Oxygen",   "O",  8.,  16.00     *g/mole);
G4Element* F  = new G4Element("Fluorine", "F",  9.,  18.9984032*g/mole);
G4Element* Na = new G4Element("Natrium",  "Na", 11., 22.99     *g/mole);
G4Element* Al = new G4Element("Aluminium","Al", 13., 26.98     *g/mole);  
G4Element* Si = new G4Element("Silicon",  "Si", 14., 28.09     *g/mole);
G4Element* Ar = new G4Element("Argon",    "Ar", 18., 39.948    *g/mole);  
G4Element* Ca = new G4Element("Calcium",  "Ca", 20., 40.078    *g/mole);
G4Element* Cr = new G4Element("Chromium", "Cr", 24., 51.9961   *g/mole);
G4Element* Fe = new G4Element("Iron",     "Fe", 26., 55.85     *g/mole);  
G4Element* Co = new G4Element("Cobalt",   "Co", 27., 58.9332   *g/mole);
G4Element* Ni = new G4Element("Nickel",   "Ni", 28., 58.6934   *g/mole);
G4Element* Cu = new G4Element("Copper",   "Cu", 29., 63.55     *g/mole);
G4Element* I  = new G4Element("Iodine",   "I",  53., 126.90447 *g/mole);
G4Element* Xe = new G4Element("Xenon",    "Xe", 54., 131.293   *g/mole);
G4Element* Pb = new G4Element("Lead",     "Pb", 82., 207.2     *g/mole);
G4Isotope* U235 = new G4Isotope("Uranium235", 92, 235, 235.0*g/mole);
G4Element* U  = new G4Element("Uranium", "U", 1);
U->AddIsotope(U235, 1);

// making xenons
G4Material* LXe = new G4Material("LXe",       3.02* g/cm3, 1, kStateLiquid, 173.15*kelvin,  1.0*atmosphere);
G4Material* GXe = new G4Material("GXe", 10.0*5.894*mg/cm3, 1, kStateGas,    300.00*kelvin,  4.0*atmosphere);
LXe->AddElement( Xe, 1);
GXe->AddElement( Xe, 1);
/*
const G4int NUMENTRIES = 3;
G4double LXe_PP[NUMENTRIES]    = { 7.0*eV , 7.07*eV, 7.14*eV };
G4double LXe_SCINT[NUMENTRIES] = { 0.1, 1.0, 0.1 };
G4double LXe_RIND[NUMENTRIES]  = { 1.59 , 1.57, 1.54 };//ref index
G4double LXe_ABSL[NUMENTRIES]  = { 35.*cm, 35.*cm, 35.*cm}; //atten length
G4MaterialPropertiesTable *LXe_mt = new G4MaterialPropertiesTable();
LXe_mt->AddProperty("FASTCOMPONENT", LXe_PP, LXe_SCINT, NUMENTRIES);
LXe_mt->AddProperty("SLOWCOMPONENT", LXe_PP, LXe_SCINT, NUMENTRIES);
LXe_mt->AddProperty("RINDEX",        LXe_PP, LXe_RIND,  NUMENTRIES);
LXe_mt->AddProperty("ABSLENGTH",     LXe_PP, LXe_ABSL,  NUMENTRIES);
LXe_mt->AddConstProperty("SCINTILLATIONYIELD",12000./MeV); // include QE 20%
// and 13eV creation energy for photons - may be 15eV?
// Fano factor assumed 1; should be much less for Xe ~ 0.13
// but the Fano factor is already partially included in the correlated 
// electron production - therefore not the absolute Fano factor here:
LXe_mt->AddConstProperty("RESOLUTIONSCALE",1.0);
LXe_mt->AddConstProperty("FASTTIMECONSTANT",20.*ns);
LXe_mt->AddConstProperty("SLOWTIMECONSTANT",45.*ns);
LXe_mt->AddConstProperty("YIELDRATIO",1.0);
LXe->SetMaterialPropertiesTable(LXe_mt);

G4double GXe_PP[NUMENTRIES]    = { 7.0*eV, 7.07*eV, 7.14*eV };
G4double GXe_SCINT[NUMENTRIES] = { 0.1, 1.0, 0.1 };
G4double GXe_RIND[NUMENTRIES]  = { 1.00, 1.00, 1.00 };
G4double GXe_ABSL[NUMENTRIES]  = { 100*m, 100*m, 100*m}; //atten length
G4MaterialPropertiesTable *GXe_mt = new G4MaterialPropertiesTable();
GXe_mt->AddProperty("FASTCOMPONENT", GXe_PP, GXe_SCINT, NUMENTRIES);
GXe_mt->AddProperty("SLOWCOMPONENT", GXe_PP, GXe_SCINT, NUMENTRIES);
GXe_mt->AddProperty("RINDEX",        GXe_PP, GXe_RIND,  NUMENTRIES);
GXe_mt->AddProperty("ABSLENGTH",     GXe_PP, GXe_ABSL,  NUMENTRIES);
GXe_mt->AddConstProperty("SCINTILLATIONYIELD",12000./MeV); // include QE 20%
GXe_mt->AddConstProperty("RESOLUTIONSCALE",1.0);
GXe_mt->AddConstProperty("FASTTIMECONSTANT",20.*ns);
GXe_mt->AddConstProperty("SLOWTIMECONSTANT",45.*ns);
GXe_mt->AddConstProperty("YIELDRATIO",1.0);
GXe->SetMaterialPropertiesTable(GXe_mt);
*/
/*
// making quartz
G4Material* quartz = new G4Material("quartz", 2.200*g/cm3, 2);
quartz->AddElement(Si, 1);
quartz->AddElement(O , 2);
G4double quartz_PP[NUMENTRIES]   = { 5.0*eV, 6.69*eV, 7.50*eV }; // lambda range 4 ri
G4double quartz_RIND[NUMENTRIES] = { 1.51, 1.57, 1.61 };     // ref index
//  G4double quartz_RIND[NUMENTRIES] = { 1.45, 1.51, 1.54 };     // ref index
G4double quartz_ABSL[NUMENTRIES] = { 3.0*cm, 3.0*cm, 3.0*cm };// atten length
G4MaterialPropertiesTable *quartz_mt = new G4MaterialPropertiesTable();
quartz_mt->AddProperty("RINDEX", quartz_PP, quartz_RIND, NUMENTRIES);
quartz_mt->AddProperty("ABSLENGTH", quartz_PP, quartz_ABSL, NUMENTRIES);
quartz->SetMaterialPropertiesTable(quartz_mt);
*/

// making photocathode aluminium
/*
G4Material* cathmetalAl = new G4Material("CathodeMetalAluminium", 2.700*g/cm3, 1);
cathmetalAl->AddElement(Al, 1);
G4double cathmetal_PP[NUMENTRIES]   = { 5.0*eV, 6.69*eV, 7.50*eV };
G4double cathmetal_RIND[NUMENTRIES] = { 1.51, 1.57, 1.61 };     // ref index
G4double cathmetal_ABSL[NUMENTRIES] = { 1.e-20*m,  1.e-20*m,  1.e-20*m };// atten length
//  G4double cathmetal_ABSL[NUMENTRIES] = { 3.0*cm, 3.0*cm, 3.0*cm };// atten length
G4MaterialPropertiesTable *cathmetal_mt = new G4MaterialPropertiesTable();
cathmetal_mt->AddProperty("RINDEX", cathmetal_PP, cathmetal_RIND,NUMENTRIES);
cathmetal_mt->AddProperty("ABSLENGTH", cathmetal_PP, cathmetal_ABSL, NUMENTRIES);
cathmetalAl->SetMaterialPropertiesTable(cathmetal_mt);
*/

// making Am source
// Americium: - NOTE it's AmO2..........
//G4Isotope* Am241 = new G4Isotope("Americium241", 95, 241, 241.0*g/mole);
//G4Element* Am = new G4Element("Americium241", "Am", 1);
//Am->AddIsotope(Am241, abundance=1);
//G4Material* sourceAm = new G4Material("AmericiumSource", 13.61*g/cm3, 2);
//sourceAm->AddElement(Am, 1);
//sourceAm->AddElement(O , 2);
// using Uranium because Americium not yet defined for RDM
G4Material* sourceAm = new G4Material("UraniumSource", 13.61*g/cm3, 1);
sourceAm->AddElement(U, 1);


// making other materials
G4Material* SUS304 = new G4Material("SUS304", 8.03*g/cm3, 3);
SUS304->AddElement(Fe, 0.7); SUS304->AddElement(Ni, 0.1); SUS304->AddElement(Cr, 0.2);

G4Material* GXe10atm = new G4Material("GXe10atm", 10.0*5.894*mg/cm3, 1, kStateGas, 300.00*kelvin, 10.0*atmosphere);
GXe10atm->AddElement(Xe, 1);

G4Material* PEEK = new G4Material("PEEK", 1.3*g/cm3, 3);
PEEK->AddElement(C,20); PEEK->AddElement(O,3); PEEK->AddElement(H,12);

G4Material* MPPC = new G4Material("MPPC", 1.0*g/cm3, 2);//??????
MPPC->AddElement(Al,2); MPPC->AddElement(O,3);

G4Material* polystyrene = new G4Material("polystyrene", 1.05*g/cm3, 2);
polystyrene->AddElement(C,1); polystyrene->AddElement(H,1);

G4Material* metalCu = new G4Material("metalCu", 8.960*g/cm3, 1);
metalCu->AddElement(Cu,1);

G4Material* PTFE = new G4Material("PTFE", 2.2*g/cm3, 2);
PTFE->AddElement(C,1); PTFE->AddElement(F,2);

G4Material* metalPb = new G4Material("metalPb", 11.340*g/cm3, 1);
metalPb->AddElement(Pb, 1);

G4Material* metalAl = new G4Material("metalAl", 2.700*g/cm3, 1);
metalAl->AddElement(Al, 1);

G4Material* quartz = new G4Material("quartz", 2.2*g/cm3, 2);
quartz->AddElement(Si, 1); quartz->AddElement(O , 2);

G4Material* photocathode = new G4Material("photocathode", 2.700*g/cm3, 1);
photocathode->AddElement(Al, 1);




G4double density_Xe_1atm  = 5.8971 *mg/cm3;//noble gas detector(273K,1atm)
G4double density_He_1atm  = 0.17850*mg/cm3;//noble gas detector(273K,1atm)
G4double density_Ar_1atm  = 1.7606 *mg/cm3;//noble gas detector(273K,1atm)
G4double density_CF4_1atm = 3.76   *mg/cm3;//Nishimura D-ron, Nakamura D-ron (15C,1atm)
G4double density_1atm = 0.0;
theGasElementNum = 0;
for(int i=0; i<theGasTypeNum; i++){
  if(     theGasType[i]=="Xe"){  density_1atm += density_Xe_1atm *theGasRatio[i];  theGasElementNum+=1; }
  else if(theGasType[i]=="He"){  density_1atm += density_He_1atm *theGasRatio[i];  theGasElementNum+=1; }
  else if(theGasType[i]=="Ar"){  density_1atm += density_Ar_1atm *theGasRatio[i];  theGasElementNum+=1; }
  else if(theGasType[i]=="CF4"){ density_1atm += density_CF4_1atm*theGasRatio[i];  theGasElementNum+=2; }
  else{ G4cout<<"ERROR unknown theGasType[i] : "<<theGasType[i]<<G4endl; exit(1); }
}
G4cout<<" density="<<density_1atm<<"   "<<density_1atm/mg*cm3<<G4endl;
G4Material* GasMix;
if(      theGasPressure > 0){ // set gas (normal use)
  GasMix = new G4Material("GasMix", density_1atm*theGasPressure, theGasElementNum, kStateGas, 300.00*kelvin, theGasPressure*atmosphere);
}else if(theGasPressure==-1){ // set liquid
  if( theGasType[0]=="Xe" && theGasTypeNum==1 ){
    GasMix = new G4Material("GasMix", 2.96*g/cm3, theGasElementNum, kStateLiquid, 173.15*kelvin, 1.0*atmosphere); // LXe
  }
}else{
  G4cout<<"ERROR: pressure or gastyle is wrong !"<<G4endl; exit(1);
}
for(int i=0; i<theGasTypeNum; i++){
  if(theGasType[i]=="Xe") GasMix->AddElement(Xe, theGasRatio[i]*density_Xe_1atm/density_1atm);
  if(theGasType[i]=="He") GasMix->AddElement(He, theGasRatio[i]*density_He_1atm/density_1atm);
  if(theGasType[i]=="Ar") GasMix->AddElement(Ar, theGasRatio[i]*density_Ar_1atm/density_1atm);
  if(theGasType[i]=="CF4"){
    GasMix->AddElement(C, theGasRatio[i]*density_CF4_1atm/density_1atm *12./88.);
    GasMix->AddElement(F, theGasRatio[i]*density_CF4_1atm/density_1atm *19.*4./88.);
  }
  G4cout<<" i="<<i<<" "<<theGasType[i]<<" "<<theGasRatio[i]<<G4endl;
}




G4Material* NaI = new G4Material("NaI", 3.67*g/cm3, 2);
NaI->AddElement(Na, 1);  NaI->AddElement(I, 1);



G4Material* B4C = new G4Material("B4C", 2.52*g/cm3, 2);
B4C->AddElement(B, 4);  B4C->AddElement(C, 1);

G4Material* NiC = new G4Material("NiC", 2.0*g/cm3, 2); //density ?
NiC->AddElement(Ni, 1);  NiC->AddElement(C, 1);

G4Material* graphite = new G4Material("graphite", 2.26*g/cm3, 1);
graphite->AddElement(C, 1);

G4Material* metalSi = new G4Material("metalSi", 2.329*g/cm3, 1);
metalSi->AddElement(Si, 1);



G4Material* metalFe = new G4Material("MetalIron", 7.874*g/cm3, 1);
metalFe->AddElement(Fe, 1);

G4Material* ssteel = new G4Material("Steel", 7.7*g/cm3, 3);
ssteel->AddElement(C, 0.04); ssteel->AddElement(Fe, 0.88); ssteel->AddElement(Co, 0.08);

G4Material* Air = new G4Material("AIR", 1.2929*kg/m3, 2, kStateGas, 300.00*kelvin, 1.0*atmosphere);
Air->AddElement(N, 0.8); Air->AddElement(O , 0.2);

G4Material* LN2 = new G4Material("LN2", 0.8*g/cm3, 1, kStateLiquid, 77.*kelvin, 1.0*atmosphere);
LN2->AddElement(N, 1);

G4Material* concrete = new G4Material("Concrete", 2.3*g/cm3, 6);
concrete->AddElement(Si, 0.227915); concrete->AddElement(O, 0.60541);   concrete->AddElement(H, 0.09972);
concrete->AddElement(Ca, 0.04986);  concrete->AddElement(Al, 0.014245); concrete->AddElement(Fe, 0.00285);

G4Material* water = new G4Material("water", 1.00*g/cm3, 2);
water->AddElement(H, 2); water->AddElement(O, 1);

G4Material* wood = new G4Material("wood", 0.9*g/cm3, 3);
wood->AddElement(H, 4); wood->AddElement(O, 1); wood->AddElement(C, 2);


G4Material* BC501A = new G4Material("BC501A", 0.874*g/cm3, 2);
BC501A->AddElement(H, 482); BC501A->AddElement(C, 398);






// print materials
//  G4cout << *(G4Material::GetMaterialTable()) << G4endl;
//  G4cout << *(G4Isotope::GetIsotopeTable())   << G4endl;
//  G4cout << *(G4Element::GetElementTable())   << G4endl;

// assign materials
       world_mat = concrete;
         lab_mat = Air;
         air_mat = Air;
      SUS304_mat = SUS304;
         gas_mat = GasMix;
        PEEK_mat = PEEK;
        MPPC_mat = MPPC;
 polystyrene_mat = polystyrene;
     metalCu_mat = metalCu;
        PTFE_mat = PTFE;
     metalPb_mat = metalPb;
     metalAl_mat = metalAl;
      quartz_mat = quartz;
photocathode_mat = metalAl;
      vacuum_mat = vacuum;
         B4C_mat = B4C;
         NiC_mat = NiC;
    graphite_mat = graphite;
     metalSi_mat = metalSi;
       water_mat = water;
      BC501A_mat = BC501A;
         NaI_mat = NaI;
